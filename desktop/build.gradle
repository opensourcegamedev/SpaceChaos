plugins {
    /*id "com.stehno.natives" version "0.2.4"*/
    id "com.stehno.natives" version "0.3.1"
    id "nebula.ospackage" version "3.6.1"
}

apply plugin: 'java'

apply plugin: "java"
apply plugin: "maven"
apply plugin: 'application'
apply plugin: "maven-publish"

sourceCompatibility = 1.8

mainClassName = "dev.game.spacechaos.desktop.DesktopLauncher"

repositories {
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    maven {
        url "https://oss.sonatype.org/content/repositories/"
    }

    mavenCentral()
}

//dont cache snapshot builds from maven central and other repositories
configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile project(":game")

    compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"

    compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
}

/**
 * task to write start script
 */
task startScriptFile {
    //
}

compileJava.dependsOn startScriptFile
build.dependsOn startScriptFile

jar {
    manifest {
        //set main class and classpath

        attributes (
                'Main-Class': mainClassName,
                //'Class-Path': configurations.runtime.files.collect { jarDir+"/$it.name" }.join(' ')

                "Class-Path": configurations.compile.collect { "lib/" + it.getName() }.join(' ')
        )
    }
}

/**
 * task to assembly an zip file
 *
 * @link http://stackoverflow.com/questions/6022280/gradle-zip-task-to-do-multiple-sub-trees
 */

task buildZip(type: Zip, dependsOn: [jar, startScriptFile]) {
    //from compileJava
    //from processResources

    println "build zip, current dir: " + new File(".").getAbsolutePath()

    into('lib') {
        from configurations.runtime
        //from fileTree(dir: "lib", include: "*")
    }

    into('data') {
        //include "*"
        from "data"
    }

    into('plugins') {
        from "plugins"
    }

    //add pentaquin-client jar
    from jar.outputs.files
    from fileTree(dir: "$buildDir/startscripts", include: "*")
    from fileTree(dir: ".", include: "test.png")
    from('bar/') {
        into('bar')
    }
}


//build.dependsOn buildZip
install.dependsOn startScriptFile
install.dependsOn buildZip

startScripts {
    //classpath = files("./lib/*")
}